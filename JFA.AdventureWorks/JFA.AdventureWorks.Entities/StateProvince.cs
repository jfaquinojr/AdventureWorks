// <auto-generated>
// ReSharper disable RedundantUsingDirective
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable RedundantNameQualifier
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Threading;

namespace JFA.AdventureWorks.Entities
{
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.17.1.0")]
    public partial class StateProvince
    {

        ///<summary>
        /// Primary key for StateProvince records.
        ///</summary>
        public int StateProvinceId { get; set; }

        ///<summary>
        /// ISO standard state or province code.
        ///</summary>
        public string StateProvinceCode { get; set; }

        ///<summary>
        /// ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode.
        ///</summary>
        public string CountryRegionCode { get; set; }

        ///<summary>
        /// 0 = StateProvinceCode exists. 1 = StateProvinceCode unavailable, using CountryRegionCode.
        ///</summary>
        public bool IsOnlyStateProvinceFlag { get; set; }

        ///<summary>
        /// State or province description.
        ///</summary>
        public string Name { get; set; }

        ///<summary>
        /// ID of the territory in which the state or province is located. Foreign key to SalesTerritory.SalesTerritoryID.
        ///</summary>
        public int TerritoryId { get; set; }

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public Guid Rowguid { get; set; }

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public DateTime ModifiedDate { get; set; }

        public virtual ICollection<Address> Addresses { get; set; }
        public virtual ICollection<SalesTaxRate> SalesTaxRates { get; set; }

        public virtual CountryRegion CountryRegion { get; set; }
        public virtual SalesTerritory SalesTerritory { get; set; }
        
        public StateProvince()
        {
            IsOnlyStateProvinceFlag = true;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Addresses = new List<Address>();
            SalesTaxRates = new List<SalesTaxRate>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
