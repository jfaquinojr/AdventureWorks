// <auto-generated>
// ReSharper disable RedundantUsingDirective
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable RedundantNameQualifier
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Data;
using System.Data.Entity.Core.Objects;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Data.Entity.ModelConfiguration;
using System.Threading;
using DatabaseGeneratedOption = System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption;

namespace JFA.AdventureWorks.Entities
{
    // SalesOrderHeader
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.17.1.0")]
    public partial class Sales_SalesOrderHeader
    {

        ///<summary>
        /// Primary key.
        ///</summary>
        public int SalesOrderId { get; set; } // SalesOrderID (Primary key)

        ///<summary>
        /// Incremental number to track changes to the sales order over time.
        ///</summary>
        public byte RevisionNumber { get; set; } // RevisionNumber

        ///<summary>
        /// Dates the sales order was created.
        ///</summary>
        public DateTime OrderDate { get; set; } // OrderDate

        ///<summary>
        /// Date the order is due to the customer.
        ///</summary>
        public DateTime DueDate { get; set; } // DueDate

        ///<summary>
        /// Date the order was shipped to the customer.
        ///</summary>
        public DateTime? ShipDate { get; set; } // ShipDate

        ///<summary>
        /// Order current status. 1 = In process; 2 = Approved; 3 = Backordered; 4 = Rejected; 5 = Shipped; 6 = Cancelled
        ///</summary>
        public byte Status { get; set; } // Status

        ///<summary>
        /// 0 = Order placed by sales person. 1 = Order placed online by customer.
        ///</summary>
        public bool OnlineOrderFlag { get; set; } // OnlineOrderFlag

        ///<summary>
        /// Unique sales order identification number.
        ///</summary>
        public string SalesOrderNumber { get; set; } // SalesOrderNumber

        ///<summary>
        /// Customer purchase order number reference.
        ///</summary>
        public string PurchaseOrderNumber { get; set; } // PurchaseOrderNumber

        ///<summary>
        /// Financial accounting number reference.
        ///</summary>
        public string AccountNumber { get; set; } // AccountNumber

        ///<summary>
        /// Customer identification number. Foreign key to Customer.BusinessEntityID.
        ///</summary>
        public int CustomerId { get; set; } // CustomerID

        ///<summary>
        /// Sales person who created the sales order. Foreign key to SalesPerson.BusinessEntityID.
        ///</summary>
        public int? SalesPersonId { get; set; } // SalesPersonID

        ///<summary>
        /// Territory in which the sale was made. Foreign key to SalesTerritory.SalesTerritoryID.
        ///</summary>
        public int? TerritoryId { get; set; } // TerritoryID

        ///<summary>
        /// Customer billing address. Foreign key to Address.AddressID.
        ///</summary>
        public int BillToAddressId { get; set; } // BillToAddressID

        ///<summary>
        /// Customer shipping address. Foreign key to Address.AddressID.
        ///</summary>
        public int ShipToAddressId { get; set; } // ShipToAddressID

        ///<summary>
        /// Shipping method. Foreign key to ShipMethod.ShipMethodID.
        ///</summary>
        public int ShipMethodId { get; set; } // ShipMethodID

        ///<summary>
        /// Credit card identification number. Foreign key to CreditCard.CreditCardID.
        ///</summary>
        public int? CreditCardId { get; set; } // CreditCardID

        ///<summary>
        /// Approval code provided by the credit card company.
        ///</summary>
        public string CreditCardApprovalCode { get; set; } // CreditCardApprovalCode

        ///<summary>
        /// Currency exchange rate used. Foreign key to CurrencyRate.CurrencyRateID.
        ///</summary>
        public int? CurrencyRateId { get; set; } // CurrencyRateID

        ///<summary>
        /// Sales subtotal. Computed as SUM(SalesOrderDetail.LineTotal)for the appropriate SalesOrderID.
        ///</summary>
        public decimal SubTotal { get; set; } // SubTotal

        ///<summary>
        /// Tax amount.
        ///</summary>
        public decimal TaxAmt { get; set; } // TaxAmt

        ///<summary>
        /// Shipping cost.
        ///</summary>
        public decimal Freight { get; set; } // Freight

        ///<summary>
        /// Total due from customer. Computed as Subtotal + TaxAmt + Freight.
        ///</summary>
        public decimal TotalDue { get; set; } // TotalDue

        ///<summary>
        /// Sales representative comments.
        ///</summary>
        public string Comment { get; set; } // Comment

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual ICollection<Sales_SalesOrderDetail> Sales_SalesOrderDetails { get; set; } // Many to many mapping
        public virtual ICollection<Sales_SalesOrderHeaderSalesReason> Sales_SalesOrderHeaderSalesReasons { get; set; } // Many to many mapping

        // Foreign keys
        public virtual Person_Address Person_Address_BillToAddressId { get; set; } // FK_SalesOrderHeader_Address_BillToAddressID
        public virtual Person_Address Person_Address_ShipToAddressId { get; set; } // FK_SalesOrderHeader_Address_ShipToAddressID
        public virtual Purchasing_ShipMethod Purchasing_ShipMethod { get; set; } // FK_SalesOrderHeader_ShipMethod_ShipMethodID
        public virtual Sales_CreditCard Sales_CreditCard { get; set; } // FK_SalesOrderHeader_CreditCard_CreditCardID
        public virtual Sales_CurrencyRate Sales_CurrencyRate { get; set; } // FK_SalesOrderHeader_CurrencyRate_CurrencyRateID
        public virtual Sales_Customer Sales_Customer { get; set; } // FK_SalesOrderHeader_Customer_CustomerID
        public virtual Sales_SalesPerson Sales_SalesPerson { get; set; } // FK_SalesOrderHeader_SalesPerson_SalesPersonID
        public virtual Sales_SalesTerritory Sales_SalesTerritory { get; set; } // FK_SalesOrderHeader_SalesTerritory_TerritoryID
        
        public Sales_SalesOrderHeader()
        {
            RevisionNumber = 0;
            OrderDate = System.DateTime.Now;
            Status = 1;
            OnlineOrderFlag = true;
            SubTotal = 0.00m;
            TaxAmt = 0.00m;
            Freight = 0.00m;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Sales_SalesOrderDetails = new List<Sales_SalesOrderDetail>();
            Sales_SalesOrderHeaderSalesReasons = new List<Sales_SalesOrderHeaderSalesReason>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
