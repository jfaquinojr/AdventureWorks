// <auto-generated>
// ReSharper disable RedundantUsingDirective
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable RedundantNameQualifier
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Threading;

namespace JFA.AdventureWorks.Entities
{
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.17.1.0")]
    public partial class Employee
    {

        ///<summary>
        /// Primary key for Employee records.  Foreign key to BusinessEntity.BusinessEntityID.
        ///</summary>
        public int BusinessEntityId { get; set; }

        ///<summary>
        /// Unique national identification number such as a social security number.
        ///</summary>
        public string NationalIdNumber { get; set; }

        ///<summary>
        /// Network login.
        ///</summary>
        public string LoginId { get; set; }

        ///<summary>
        /// Where the employee is located in corporate hierarchy.
        ///</summary>
        public string OrganizationNode { get; set; }

        ///<summary>
        /// The depth of the employee in the corporate hierarchy.
        ///</summary>
        public short? OrganizationLevel { get; set; }

        ///<summary>
        /// Work title such as Buyer or Sales Representative.
        ///</summary>
        public string JobTitle { get; set; }

        ///<summary>
        /// Date of birth.
        ///</summary>
        public DateTime BirthDate { get; set; }

        ///<summary>
        /// M = Married, S = Single
        ///</summary>
        public string MaritalStatus { get; set; }

        ///<summary>
        /// M = Male, F = Female
        ///</summary>
        public string Gender { get; set; }

        ///<summary>
        /// Employee hired on this date.
        ///</summary>
        public DateTime HireDate { get; set; }

        ///<summary>
        /// Job classification. 0 = Hourly, not exempt from collective bargaining. 1 = Salaried, exempt from collective bargaining.
        ///</summary>
        public bool SalariedFlag { get; set; }

        ///<summary>
        /// Number of available vacation hours.
        ///</summary>
        public short VacationHours { get; set; }

        ///<summary>
        /// Number of available sick leave hours.
        ///</summary>
        public short SickLeaveHours { get; set; }

        ///<summary>
        /// 0 = Inactive, 1 = Active
        ///</summary>
        public bool CurrentFlag { get; set; }

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public Guid Rowguid { get; set; }

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public DateTime ModifiedDate { get; set; }

        public virtual ICollection<Document> Documents { get; set; }
        public virtual ICollection<EmployeeDepartmentHistory> EmployeeDepartmentHistories { get; set; }
        public virtual ICollection<EmployeePayHistory> EmployeePayHistories { get; set; }
        public virtual ICollection<JobCandidate> JobCandidates { get; set; }
        public virtual ICollection<PurchaseOrderHeader> PurchaseOrderHeaders { get; set; }
        public virtual SalesPerson SalesPerson { get; set; }

        public virtual Person Person { get; set; }
        
        public Employee()
        {
            SalariedFlag = true;
            VacationHours = 0;
            SickLeaveHours = 0;
            CurrentFlag = true;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Documents = new List<Document>();
            EmployeeDepartmentHistories = new List<EmployeeDepartmentHistory>();
            EmployeePayHistories = new List<EmployeePayHistory>();
            JobCandidates = new List<JobCandidate>();
            PurchaseOrderHeaders = new List<PurchaseOrderHeader>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
