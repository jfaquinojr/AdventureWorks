// <auto-generated>
// ReSharper disable RedundantUsingDirective
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable RedundantNameQualifier
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Data;
using System.Data.Entity.Core.Objects;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Data.Entity.ModelConfiguration;
using System.Threading;
using DatabaseGeneratedOption = System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption;

namespace JFA.AdventureWorks.Entities
{
    public partial class AdventureWorksDBContext : DbContext, IAdventureWorksDBContext
    {
        public DbSet<AwBuildVersion> AwBuildVersions { get; set; } // AWBuildVersion
        public DbSet<DatabaseLog> DatabaseLogs { get; set; } // DatabaseLog
        public DbSet<ErrorLog> ErrorLogs { get; set; } // ErrorLog
        public DbSet<HumanResources_Department> HumanResources_Departments { get; set; } // Department
        public DbSet<HumanResources_Employee> HumanResources_Employees { get; set; } // Employee
        public DbSet<HumanResources_EmployeeDepartmentHistory> HumanResources_EmployeeDepartmentHistories { get; set; } // EmployeeDepartmentHistory
        public DbSet<HumanResources_EmployeePayHistory> HumanResources_EmployeePayHistories { get; set; } // EmployeePayHistory
        public DbSet<HumanResources_JobCandidate> HumanResources_JobCandidates { get; set; } // JobCandidate
        public DbSet<HumanResources_Shift> HumanResources_Shifts { get; set; } // Shift
        public DbSet<HumanResources_VEmployee> HumanResources_VEmployees { get; set; } // vEmployee
        public DbSet<HumanResources_VEmployeeDepartment> HumanResources_VEmployeeDepartments { get; set; } // vEmployeeDepartment
        public DbSet<HumanResources_VEmployeeDepartmentHistory> HumanResources_VEmployeeDepartmentHistories { get; set; } // vEmployeeDepartmentHistory
        public DbSet<HumanResources_VJobCandidate> HumanResources_VJobCandidates { get; set; } // vJobCandidate
        public DbSet<HumanResources_VJobCandidateEducation> HumanResources_VJobCandidateEducations { get; set; } // vJobCandidateEducation
        public DbSet<HumanResources_VJobCandidateEmployment> HumanResources_VJobCandidateEmployments { get; set; } // vJobCandidateEmployment
        public DbSet<Person_Address> Person_Addresses { get; set; } // Address
        public DbSet<Person_AddressType> Person_AddressTypes { get; set; } // AddressType
        public DbSet<Person_BusinessEntity> Person_BusinessEntities { get; set; } // BusinessEntity
        public DbSet<Person_BusinessEntityAddress> Person_BusinessEntityAddresses { get; set; } // BusinessEntityAddress
        public DbSet<Person_BusinessEntityContact> Person_BusinessEntityContacts { get; set; } // BusinessEntityContact
        public DbSet<Person_ContactType> Person_ContactTypes { get; set; } // ContactType
        public DbSet<Person_CountryRegion> Person_CountryRegions { get; set; } // CountryRegion
        public DbSet<Person_EmailAddress> Person_EmailAddresses { get; set; } // EmailAddress
        public DbSet<Person_Password> Person_Passwords { get; set; } // Password
        public DbSet<Person_Person> Person_People { get; set; } // Person
        public DbSet<Person_PersonPhone> Person_PersonPhones { get; set; } // PersonPhone
        public DbSet<Person_PhoneNumberType> Person_PhoneNumberTypes { get; set; } // PhoneNumberType
        public DbSet<Person_StateProvince> Person_StateProvinces { get; set; } // StateProvince
        public DbSet<Person_VAdditionalContactInfo> Person_VAdditionalContactInfoes { get; set; } // vAdditionalContactInfo
        public DbSet<Person_VStateProvinceCountryRegion> Person_VStateProvinceCountryRegions { get; set; } // vStateProvinceCountryRegion
        public DbSet<Production_BillOfMaterial> Production_BillOfMaterials { get; set; } // BillOfMaterials
        public DbSet<Production_Culture> Production_Cultures { get; set; } // Culture
        public DbSet<Production_Document> Production_Documents { get; set; } // Document
        public DbSet<Production_Illustration> Production_Illustrations { get; set; } // Illustration
        public DbSet<Production_Location> Production_Locations { get; set; } // Location
        public DbSet<Production_Product> Production_Products { get; set; } // Product
        public DbSet<Production_ProductCategory> Production_ProductCategories { get; set; } // ProductCategory
        public DbSet<Production_ProductCostHistory> Production_ProductCostHistories { get; set; } // ProductCostHistory
        public DbSet<Production_ProductDescription> Production_ProductDescriptions { get; set; } // ProductDescription
        public DbSet<Production_ProductDocument> Production_ProductDocuments { get; set; } // ProductDocument
        public DbSet<Production_ProductInventory> Production_ProductInventories { get; set; } // ProductInventory
        public DbSet<Production_ProductListPriceHistory> Production_ProductListPriceHistories { get; set; } // ProductListPriceHistory
        public DbSet<Production_ProductModel> Production_ProductModels { get; set; } // ProductModel
        public DbSet<Production_ProductModelIllustration> Production_ProductModelIllustrations { get; set; } // ProductModelIllustration
        public DbSet<Production_ProductModelProductDescriptionCulture> Production_ProductModelProductDescriptionCultures { get; set; } // ProductModelProductDescriptionCulture
        public DbSet<Production_ProductPhoto> Production_ProductPhotoes { get; set; } // ProductPhoto
        public DbSet<Production_ProductProductPhoto> Production_ProductProductPhotoes { get; set; } // ProductProductPhoto
        public DbSet<Production_ProductReview> Production_ProductReviews { get; set; } // ProductReview
        public DbSet<Production_ProductSubcategory> Production_ProductSubcategories { get; set; } // ProductSubcategory
        public DbSet<Production_ScrapReason> Production_ScrapReasons { get; set; } // ScrapReason
        public DbSet<Production_TransactionHistory> Production_TransactionHistories { get; set; } // TransactionHistory
        public DbSet<Production_TransactionHistoryArchive> Production_TransactionHistoryArchives { get; set; } // TransactionHistoryArchive
        public DbSet<Production_UnitMeasure> Production_UnitMeasures { get; set; } // UnitMeasure
        public DbSet<Production_VProductAndDescription> Production_VProductAndDescriptions { get; set; } // vProductAndDescription
        public DbSet<Production_VProductModelCatalogDescription> Production_VProductModelCatalogDescriptions { get; set; } // vProductModelCatalogDescription
        public DbSet<Production_VProductModelInstruction> Production_VProductModelInstructions { get; set; } // vProductModelInstructions
        public DbSet<Production_WorkOrder> Production_WorkOrders { get; set; } // WorkOrder
        public DbSet<Production_WorkOrderRouting> Production_WorkOrderRoutings { get; set; } // WorkOrderRouting
        public DbSet<Purchasing_ProductVendor> Purchasing_ProductVendors { get; set; } // ProductVendor
        public DbSet<Purchasing_PurchaseOrderDetail> Purchasing_PurchaseOrderDetails { get; set; } // PurchaseOrderDetail
        public DbSet<Purchasing_PurchaseOrderHeader> Purchasing_PurchaseOrderHeaders { get; set; } // PurchaseOrderHeader
        public DbSet<Purchasing_ShipMethod> Purchasing_ShipMethods { get; set; } // ShipMethod
        public DbSet<Purchasing_Vendor> Purchasing_Vendors { get; set; } // Vendor
        public DbSet<Purchasing_VVendorWithAddress> Purchasing_VVendorWithAddresses { get; set; } // vVendorWithAddresses
        public DbSet<Purchasing_VVendorWithContact> Purchasing_VVendorWithContacts { get; set; } // vVendorWithContacts
        public DbSet<Sales_CountryRegionCurrency> Sales_CountryRegionCurrencies { get; set; } // CountryRegionCurrency
        public DbSet<Sales_CreditCard> Sales_CreditCards { get; set; } // CreditCard
        public DbSet<Sales_Currency> Sales_Currencies { get; set; } // Currency
        public DbSet<Sales_CurrencyRate> Sales_CurrencyRates { get; set; } // CurrencyRate
        public DbSet<Sales_Customer> Sales_Customers { get; set; } // Customer
        public DbSet<Sales_PersonCreditCard> Sales_PersonCreditCards { get; set; } // PersonCreditCard
        public DbSet<Sales_SalesOrderDetail> Sales_SalesOrderDetails { get; set; } // SalesOrderDetail
        public DbSet<Sales_SalesOrderHeader> Sales_SalesOrderHeaders { get; set; } // SalesOrderHeader
        public DbSet<Sales_SalesOrderHeaderSalesReason> Sales_SalesOrderHeaderSalesReasons { get; set; } // SalesOrderHeaderSalesReason
        public DbSet<Sales_SalesPerson> Sales_SalesPersons { get; set; } // SalesPerson
        public DbSet<Sales_SalesPersonQuotaHistory> Sales_SalesPersonQuotaHistories { get; set; } // SalesPersonQuotaHistory
        public DbSet<Sales_SalesReason> Sales_SalesReasons { get; set; } // SalesReason
        public DbSet<Sales_SalesTaxRate> Sales_SalesTaxRates { get; set; } // SalesTaxRate
        public DbSet<Sales_SalesTerritory> Sales_SalesTerritories { get; set; } // SalesTerritory
        public DbSet<Sales_SalesTerritoryHistory> Sales_SalesTerritoryHistories { get; set; } // SalesTerritoryHistory
        public DbSet<Sales_ShoppingCartItem> Sales_ShoppingCartItems { get; set; } // ShoppingCartItem
        public DbSet<Sales_SpecialOffer> Sales_SpecialOffers { get; set; } // SpecialOffer
        public DbSet<Sales_SpecialOfferProduct> Sales_SpecialOfferProducts { get; set; } // SpecialOfferProduct
        public DbSet<Sales_Store> Sales_Stores { get; set; } // Store
        public DbSet<Sales_VIndividualCustomer> Sales_VIndividualCustomers { get; set; } // vIndividualCustomer
        public DbSet<Sales_VPersonDemographic> Sales_VPersonDemographics { get; set; } // vPersonDemographics
        public DbSet<Sales_VSalesPerson> Sales_VSalesPersons { get; set; } // vSalesPerson
        public DbSet<Sales_VSalesPersonSalesByFiscalYear> Sales_VSalesPersonSalesByFiscalYears { get; set; } // vSalesPersonSalesByFiscalYears
        public DbSet<Sales_VStoreWithAddress> Sales_VStoreWithAddresses { get; set; } // vStoreWithAddresses
        public DbSet<Sales_VStoreWithContact> Sales_VStoreWithContacts { get; set; } // vStoreWithContacts
        public DbSet<Sales_VStoreWithDemographic> Sales_VStoreWithDemographics { get; set; } // vStoreWithDemographics
        
        static AdventureWorksDBContext()
        {
            System.Data.Entity.Database.SetInitializer<AdventureWorksDBContext>(null);
        }

        public AdventureWorksDBContext()
            : base("Name=AdventureWorksDB")
        {
            InitializePartial();
        }

        public AdventureWorksDBContext(string connectionString) : base(connectionString)
        {
            InitializePartial();
        }

        public AdventureWorksDBContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model) : base(connectionString, model)
        {
            InitializePartial();
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AwBuildVersionConfiguration());
            modelBuilder.Configurations.Add(new DatabaseLogConfiguration());
            modelBuilder.Configurations.Add(new ErrorLogConfiguration());
            modelBuilder.Configurations.Add(new HumanResources_DepartmentConfiguration());
            modelBuilder.Configurations.Add(new HumanResources_EmployeeConfiguration());
            modelBuilder.Configurations.Add(new HumanResources_EmployeeDepartmentHistoryConfiguration());
            modelBuilder.Configurations.Add(new HumanResources_EmployeePayHistoryConfiguration());
            modelBuilder.Configurations.Add(new HumanResources_JobCandidateConfiguration());
            modelBuilder.Configurations.Add(new HumanResources_ShiftConfiguration());
            modelBuilder.Configurations.Add(new HumanResources_VEmployeeConfiguration());
            modelBuilder.Configurations.Add(new HumanResources_VEmployeeDepartmentConfiguration());
            modelBuilder.Configurations.Add(new HumanResources_VEmployeeDepartmentHistoryConfiguration());
            modelBuilder.Configurations.Add(new HumanResources_VJobCandidateConfiguration());
            modelBuilder.Configurations.Add(new HumanResources_VJobCandidateEducationConfiguration());
            modelBuilder.Configurations.Add(new HumanResources_VJobCandidateEmploymentConfiguration());
            modelBuilder.Configurations.Add(new Person_AddressConfiguration());
            modelBuilder.Configurations.Add(new Person_AddressTypeConfiguration());
            modelBuilder.Configurations.Add(new Person_BusinessEntityConfiguration());
            modelBuilder.Configurations.Add(new Person_BusinessEntityAddressConfiguration());
            modelBuilder.Configurations.Add(new Person_BusinessEntityContactConfiguration());
            modelBuilder.Configurations.Add(new Person_ContactTypeConfiguration());
            modelBuilder.Configurations.Add(new Person_CountryRegionConfiguration());
            modelBuilder.Configurations.Add(new Person_EmailAddressConfiguration());
            modelBuilder.Configurations.Add(new Person_PasswordConfiguration());
            modelBuilder.Configurations.Add(new Person_PersonConfiguration());
            modelBuilder.Configurations.Add(new Person_PersonPhoneConfiguration());
            modelBuilder.Configurations.Add(new Person_PhoneNumberTypeConfiguration());
            modelBuilder.Configurations.Add(new Person_StateProvinceConfiguration());
            modelBuilder.Configurations.Add(new Person_VAdditionalContactInfoConfiguration());
            modelBuilder.Configurations.Add(new Person_VStateProvinceCountryRegionConfiguration());
            modelBuilder.Configurations.Add(new Production_BillOfMaterialConfiguration());
            modelBuilder.Configurations.Add(new Production_CultureConfiguration());
            modelBuilder.Configurations.Add(new Production_DocumentConfiguration());
            modelBuilder.Configurations.Add(new Production_IllustrationConfiguration());
            modelBuilder.Configurations.Add(new Production_LocationConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductCategoryConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductCostHistoryConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductDescriptionConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductDocumentConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductInventoryConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductListPriceHistoryConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductModelConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductModelIllustrationConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductModelProductDescriptionCultureConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductPhotoConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductProductPhotoConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductReviewConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductSubcategoryConfiguration());
            modelBuilder.Configurations.Add(new Production_ScrapReasonConfiguration());
            modelBuilder.Configurations.Add(new Production_TransactionHistoryConfiguration());
            modelBuilder.Configurations.Add(new Production_TransactionHistoryArchiveConfiguration());
            modelBuilder.Configurations.Add(new Production_UnitMeasureConfiguration());
            modelBuilder.Configurations.Add(new Production_VProductAndDescriptionConfiguration());
            modelBuilder.Configurations.Add(new Production_VProductModelCatalogDescriptionConfiguration());
            modelBuilder.Configurations.Add(new Production_VProductModelInstructionConfiguration());
            modelBuilder.Configurations.Add(new Production_WorkOrderConfiguration());
            modelBuilder.Configurations.Add(new Production_WorkOrderRoutingConfiguration());
            modelBuilder.Configurations.Add(new Purchasing_ProductVendorConfiguration());
            modelBuilder.Configurations.Add(new Purchasing_PurchaseOrderDetailConfiguration());
            modelBuilder.Configurations.Add(new Purchasing_PurchaseOrderHeaderConfiguration());
            modelBuilder.Configurations.Add(new Purchasing_ShipMethodConfiguration());
            modelBuilder.Configurations.Add(new Purchasing_VendorConfiguration());
            modelBuilder.Configurations.Add(new Purchasing_VVendorWithAddressConfiguration());
            modelBuilder.Configurations.Add(new Purchasing_VVendorWithContactConfiguration());
            modelBuilder.Configurations.Add(new Sales_CountryRegionCurrencyConfiguration());
            modelBuilder.Configurations.Add(new Sales_CreditCardConfiguration());
            modelBuilder.Configurations.Add(new Sales_CurrencyConfiguration());
            modelBuilder.Configurations.Add(new Sales_CurrencyRateConfiguration());
            modelBuilder.Configurations.Add(new Sales_CustomerConfiguration());
            modelBuilder.Configurations.Add(new Sales_PersonCreditCardConfiguration());
            modelBuilder.Configurations.Add(new Sales_SalesOrderDetailConfiguration());
            modelBuilder.Configurations.Add(new Sales_SalesOrderHeaderConfiguration());
            modelBuilder.Configurations.Add(new Sales_SalesOrderHeaderSalesReasonConfiguration());
            modelBuilder.Configurations.Add(new Sales_SalesPersonConfiguration());
            modelBuilder.Configurations.Add(new Sales_SalesPersonQuotaHistoryConfiguration());
            modelBuilder.Configurations.Add(new Sales_SalesReasonConfiguration());
            modelBuilder.Configurations.Add(new Sales_SalesTaxRateConfiguration());
            modelBuilder.Configurations.Add(new Sales_SalesTerritoryConfiguration());
            modelBuilder.Configurations.Add(new Sales_SalesTerritoryHistoryConfiguration());
            modelBuilder.Configurations.Add(new Sales_ShoppingCartItemConfiguration());
            modelBuilder.Configurations.Add(new Sales_SpecialOfferConfiguration());
            modelBuilder.Configurations.Add(new Sales_SpecialOfferProductConfiguration());
            modelBuilder.Configurations.Add(new Sales_StoreConfiguration());
            modelBuilder.Configurations.Add(new Sales_VIndividualCustomerConfiguration());
            modelBuilder.Configurations.Add(new Sales_VPersonDemographicConfiguration());
            modelBuilder.Configurations.Add(new Sales_VSalesPersonConfiguration());
            modelBuilder.Configurations.Add(new Sales_VSalesPersonSalesByFiscalYearConfiguration());
            modelBuilder.Configurations.Add(new Sales_VStoreWithAddressConfiguration());
            modelBuilder.Configurations.Add(new Sales_VStoreWithContactConfiguration());
            modelBuilder.Configurations.Add(new Sales_VStoreWithDemographicConfiguration());

            OnModelCreatingPartial(modelBuilder);
        }

        public static DbModelBuilder CreateModel(DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AwBuildVersionConfiguration(schema));
            modelBuilder.Configurations.Add(new DatabaseLogConfiguration(schema));
            modelBuilder.Configurations.Add(new ErrorLogConfiguration(schema));
            modelBuilder.Configurations.Add(new HumanResources_DepartmentConfiguration(schema));
            modelBuilder.Configurations.Add(new HumanResources_EmployeeConfiguration(schema));
            modelBuilder.Configurations.Add(new HumanResources_EmployeeDepartmentHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new HumanResources_EmployeePayHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new HumanResources_JobCandidateConfiguration(schema));
            modelBuilder.Configurations.Add(new HumanResources_ShiftConfiguration(schema));
            modelBuilder.Configurations.Add(new HumanResources_VEmployeeConfiguration(schema));
            modelBuilder.Configurations.Add(new HumanResources_VEmployeeDepartmentConfiguration(schema));
            modelBuilder.Configurations.Add(new HumanResources_VEmployeeDepartmentHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new HumanResources_VJobCandidateConfiguration(schema));
            modelBuilder.Configurations.Add(new HumanResources_VJobCandidateEducationConfiguration(schema));
            modelBuilder.Configurations.Add(new HumanResources_VJobCandidateEmploymentConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_AddressConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_AddressTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_BusinessEntityConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_BusinessEntityAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_BusinessEntityContactConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_ContactTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_CountryRegionConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_EmailAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_PasswordConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_PersonConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_PersonPhoneConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_PhoneNumberTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_StateProvinceConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_VAdditionalContactInfoConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_VStateProvinceCountryRegionConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_BillOfMaterialConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_CultureConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_DocumentConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_IllustrationConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_LocationConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductCategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductCostHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductDescriptionConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductDocumentConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductInventoryConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductListPriceHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductModelConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductModelIllustrationConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductModelProductDescriptionCultureConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductPhotoConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductProductPhotoConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductReviewConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductSubcategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ScrapReasonConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_TransactionHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_TransactionHistoryArchiveConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_UnitMeasureConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_VProductAndDescriptionConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_VProductModelCatalogDescriptionConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_VProductModelInstructionConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_WorkOrderConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_WorkOrderRoutingConfiguration(schema));
            modelBuilder.Configurations.Add(new Purchasing_ProductVendorConfiguration(schema));
            modelBuilder.Configurations.Add(new Purchasing_PurchaseOrderDetailConfiguration(schema));
            modelBuilder.Configurations.Add(new Purchasing_PurchaseOrderHeaderConfiguration(schema));
            modelBuilder.Configurations.Add(new Purchasing_ShipMethodConfiguration(schema));
            modelBuilder.Configurations.Add(new Purchasing_VendorConfiguration(schema));
            modelBuilder.Configurations.Add(new Purchasing_VVendorWithAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new Purchasing_VVendorWithContactConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_CountryRegionCurrencyConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_CreditCardConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_CurrencyConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_CurrencyRateConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_CustomerConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_PersonCreditCardConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_SalesOrderDetailConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_SalesOrderHeaderConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_SalesOrderHeaderSalesReasonConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_SalesPersonConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_SalesPersonQuotaHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_SalesReasonConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_SalesTaxRateConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_SalesTerritoryConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_SalesTerritoryHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_ShoppingCartItemConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_SpecialOfferConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_SpecialOfferProductConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_StoreConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_VIndividualCustomerConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_VPersonDemographicConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_VSalesPersonConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_VSalesPersonSalesByFiscalYearConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_VStoreWithAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_VStoreWithContactConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_VStoreWithDemographicConfiguration(schema));
            return modelBuilder;
        }

        partial void InitializePartial();
        partial void OnModelCreatingPartial(DbModelBuilder modelBuilder);
        
        // Stored Procedures
        public List<UspGetBillOfMaterialsReturnModel> UspGetBillOfMaterials(int? startProductId, DateTime? checkDate)
        {
            int procResult;
            return UspGetBillOfMaterials(startProductId, checkDate, out procResult);
        }

        public List<UspGetBillOfMaterialsReturnModel> UspGetBillOfMaterials(int? startProductId, DateTime? checkDate, out int procResult)
        {
            var startProductIdParam = new SqlParameter { ParameterName = "@StartProductID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = startProductId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!startProductId.HasValue)
                startProductIdParam.Value = DBNull.Value;

            var checkDateParam = new SqlParameter { ParameterName = "@CheckDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = checkDate.GetValueOrDefault() };
            if (!checkDate.HasValue)
                checkDateParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UspGetBillOfMaterialsReturnModel>("EXEC @procResult = [dbo].[uspGetBillOfMaterials] @StartProductID, @CheckDate", startProductIdParam, checkDateParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public List<UspGetEmployeeManagersReturnModel> UspGetEmployeeManagers(int? businessEntityId)
        {
            int procResult;
            return UspGetEmployeeManagers(businessEntityId, out procResult);
        }

        public List<UspGetEmployeeManagersReturnModel> UspGetEmployeeManagers(int? businessEntityId, out int procResult)
        {
            var businessEntityIdParam = new SqlParameter { ParameterName = "@BusinessEntityID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = businessEntityId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!businessEntityId.HasValue)
                businessEntityIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UspGetEmployeeManagersReturnModel>("EXEC @procResult = [dbo].[uspGetEmployeeManagers] @BusinessEntityID", businessEntityIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public List<UspGetManagerEmployeesReturnModel> UspGetManagerEmployees(int? businessEntityId)
        {
            int procResult;
            return UspGetManagerEmployees(businessEntityId, out procResult);
        }

        public List<UspGetManagerEmployeesReturnModel> UspGetManagerEmployees(int? businessEntityId, out int procResult)
        {
            var businessEntityIdParam = new SqlParameter { ParameterName = "@BusinessEntityID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = businessEntityId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!businessEntityId.HasValue)
                businessEntityIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UspGetManagerEmployeesReturnModel>("EXEC @procResult = [dbo].[uspGetManagerEmployees] @BusinessEntityID", businessEntityIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public List<UspGetWhereUsedProductIdReturnModel> UspGetWhereUsedProductId(int? startProductId, DateTime? checkDate)
        {
            int procResult;
            return UspGetWhereUsedProductId(startProductId, checkDate, out procResult);
        }

        public List<UspGetWhereUsedProductIdReturnModel> UspGetWhereUsedProductId(int? startProductId, DateTime? checkDate, out int procResult)
        {
            var startProductIdParam = new SqlParameter { ParameterName = "@StartProductID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = startProductId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!startProductId.HasValue)
                startProductIdParam.Value = DBNull.Value;

            var checkDateParam = new SqlParameter { ParameterName = "@CheckDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = checkDate.GetValueOrDefault() };
            if (!checkDate.HasValue)
                checkDateParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UspGetWhereUsedProductIdReturnModel>("EXEC @procResult = [dbo].[uspGetWhereUsedProductID] @StartProductID, @CheckDate", startProductIdParam, checkDateParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public int UspLogError(out int? errorLogId)
        {
            var errorLogIdParam = new SqlParameter { ParameterName = "@ErrorLogID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[uspLogError] @ErrorLogID OUTPUT", errorLogIdParam, procResultParam);
            if (IsSqlParameterNull(errorLogIdParam))
                errorLogId = null;
            else
                errorLogId = (int) errorLogIdParam.Value;
 
            return (int) procResultParam.Value;
        }

        public int UspPrintError()
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[uspPrintError] ", procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int HumanResources_UspUpdateEmployeeHireInfo(int? businessEntityId, string jobTitle, DateTime? hireDate, DateTime? rateChangeDate, decimal? rate, byte? payFrequency, bool? currentFlag)
        {
            var businessEntityIdParam = new SqlParameter { ParameterName = "@BusinessEntityID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = businessEntityId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!businessEntityId.HasValue)
                businessEntityIdParam.Value = DBNull.Value;

            var jobTitleParam = new SqlParameter { ParameterName = "@JobTitle", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = jobTitle, Size = 50 };
            if (jobTitleParam.Value == null)
                jobTitleParam.Value = DBNull.Value;

            var hireDateParam = new SqlParameter { ParameterName = "@HireDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = hireDate.GetValueOrDefault() };
            if (!hireDate.HasValue)
                hireDateParam.Value = DBNull.Value;

            var rateChangeDateParam = new SqlParameter { ParameterName = "@RateChangeDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = rateChangeDate.GetValueOrDefault() };
            if (!rateChangeDate.HasValue)
                rateChangeDateParam.Value = DBNull.Value;

            var rateParam = new SqlParameter { ParameterName = "@Rate", SqlDbType = SqlDbType.Money, Direction = ParameterDirection.Input, Value = rate.GetValueOrDefault(), Precision = 19, Scale = 4 };
            if (!rate.HasValue)
                rateParam.Value = DBNull.Value;

            var payFrequencyParam = new SqlParameter { ParameterName = "@PayFrequency", SqlDbType = SqlDbType.TinyInt, Direction = ParameterDirection.Input, Value = payFrequency.GetValueOrDefault(), Precision = 3, Scale = 0 };
            if (!payFrequency.HasValue)
                payFrequencyParam.Value = DBNull.Value;

            var currentFlagParam = new SqlParameter { ParameterName = "@CurrentFlag", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = currentFlag.GetValueOrDefault() };
            if (!currentFlag.HasValue)
                currentFlagParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [HumanResources].[uspUpdateEmployeeHireInfo] @BusinessEntityID, @JobTitle, @HireDate, @RateChangeDate, @Rate, @PayFrequency, @CurrentFlag", businessEntityIdParam, jobTitleParam, hireDateParam, rateChangeDateParam, rateParam, payFrequencyParam, currentFlagParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int HumanResources_UspUpdateEmployeeLogin(int? businessEntityId, string organizationNode, string loginId, string jobTitle, DateTime? hireDate, bool? currentFlag)
        {
            var businessEntityIdParam = new SqlParameter { ParameterName = "@BusinessEntityID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = businessEntityId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!businessEntityId.HasValue)
                businessEntityIdParam.Value = DBNull.Value;

            var organizationNodeParam = new SqlParameter { ParameterName = "@OrganizationNode", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = organizationNode, Size = 892 };
            if (organizationNodeParam.Value == null)
                organizationNodeParam.Value = DBNull.Value;

            var loginIdParam = new SqlParameter { ParameterName = "@LoginID", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = loginId, Size = 256 };
            if (loginIdParam.Value == null)
                loginIdParam.Value = DBNull.Value;

            var jobTitleParam = new SqlParameter { ParameterName = "@JobTitle", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = jobTitle, Size = 50 };
            if (jobTitleParam.Value == null)
                jobTitleParam.Value = DBNull.Value;

            var hireDateParam = new SqlParameter { ParameterName = "@HireDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = hireDate.GetValueOrDefault() };
            if (!hireDate.HasValue)
                hireDateParam.Value = DBNull.Value;

            var currentFlagParam = new SqlParameter { ParameterName = "@CurrentFlag", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = currentFlag.GetValueOrDefault() };
            if (!currentFlag.HasValue)
                currentFlagParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [HumanResources].[uspUpdateEmployeeLogin] @BusinessEntityID, @OrganizationNode, @LoginID, @JobTitle, @HireDate, @CurrentFlag", businessEntityIdParam, organizationNodeParam, loginIdParam, jobTitleParam, hireDateParam, currentFlagParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int HumanResources_UspUpdateEmployeePersonalInfo(int? businessEntityId, string nationalIdNumber, DateTime? birthDate, string maritalStatus, string gender)
        {
            var businessEntityIdParam = new SqlParameter { ParameterName = "@BusinessEntityID", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = businessEntityId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!businessEntityId.HasValue)
                businessEntityIdParam.Value = DBNull.Value;

            var nationalIdNumberParam = new SqlParameter { ParameterName = "@NationalIDNumber", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = nationalIdNumber, Size = 15 };
            if (nationalIdNumberParam.Value == null)
                nationalIdNumberParam.Value = DBNull.Value;

            var birthDateParam = new SqlParameter { ParameterName = "@BirthDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = birthDate.GetValueOrDefault() };
            if (!birthDate.HasValue)
                birthDateParam.Value = DBNull.Value;

            var maritalStatusParam = new SqlParameter { ParameterName = "@MaritalStatus", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = maritalStatus, Size = 1 };
            if (maritalStatusParam.Value == null)
                maritalStatusParam.Value = DBNull.Value;

            var genderParam = new SqlParameter { ParameterName = "@Gender", SqlDbType = SqlDbType.NChar, Direction = ParameterDirection.Input, Value = gender, Size = 1 };
            if (genderParam.Value == null)
                genderParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [HumanResources].[uspUpdateEmployeePersonalInfo] @BusinessEntityID, @NationalIDNumber, @BirthDate, @MaritalStatus, @Gender", businessEntityIdParam, nationalIdNumberParam, birthDateParam, maritalStatusParam, genderParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

    }
}
// </auto-generated>
